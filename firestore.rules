rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Users collection - users can read/write their own data
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
    }
    
    // User categories - users can read/write their own categories
    match /userCategories/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    match /expenses/{expenseId} {
      // Users can only read their own expenses
      allow read, list: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Users can only create expenses with their own userId
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.type == "personal";
      
      // Users can only update/delete their own expenses
      allow update, delete: if isAuthenticated() && 
                               resource.data.userId == request.auth.uid;
    }
    
    match /budgets/{budgetId} {
      // Users can only read their own budgets
      allow read, list: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Users can only create budgets with their own userId
      allow write: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid &&
                      request.resource.data.type == "personal";
    }
    
    // Installments collection - only owner can access
    match /installments/{installmentId} {
      allow read, list: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    match /salary/{salaryId} {
      // Users can only read their own salary records
      allow read, list: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Users can only create salary with their own userId
      allow write: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid &&
                      request.resource.data.type == "personal";
    }
    
  }
}
